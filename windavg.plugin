#!/usr/bin/awk -f
#
#	windavg.plugin		Meteobridge plugin weatherstation to calculate wind average if nto provided by meteo station
#
#  Copyright 2022 by IU1JVO [Giuliano Favro] (iu1jvo@gmail.com)
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#	Meteobridge user-defined plugin weatherstation to calculate Wind average from
#	wind speed sensor as a t0 sensor.
#
#	Written 05-Jan-2021 by IU1JVO (Giuliano Favro) Ver 1.0 (iu1jvo@gmail.com)
#
# awk lang reference:
#		http://www.math.utah.edu/docs/info/gawk_toc.html

# function definitions

# write timestampped message to logfile ala mb style
function writelog(path, name, message)
{
	system("echo '"name" ("strftime("%d.%m.%Y %T",systime())"): "message"' >> "path" 2>/dev/null")
}


# compute Wind Average
function calcawg(speeds, dataNum)
{
	tot=0.00
	for (i = 0; i < maxData; i++) {
		tot = tot + arr_speed[i]
	}

	return (tot / dataNum)
}



# main program
BEGIN {

	myname = "windawg"
	ver = "1.0"    # version
	maxData = 120  # Maximum Number of Data Sample
	wind_awg = 0.0 # Wind average
	exit_code = -1 # Exit Code

	# the os command used to return wind speed 
	mb_cmd = "wget -q -O - 'http://localhost/public/template.cgi?template=[wind0wind-act]&contenttype=text/plain;charset=iso-8859-1'"
	logfile = "/tmp/log/meteobridge.log"
	pollsleep = 5
	writetolog = 1

	if(writetolog)
	{
		writelog(logfile,myname,"(windvg) Wind Average plugin weather station (version "ver") started.")
		writelog(logfile,myname,"polling interval "pollsleep" seconds.")
		writelog(logfile,myname,"mb logger command line: '"mb_cmd"'")
	}

	ssm = strftime("%S",systime()) + (strftime("%M",systime()) * 60) + (strftime("%H",systime()) * 3600) # seconds since midnight
	if(pollsleep - ((ssm % pollsleep) > 0))
	{
		if(writetolog)
			writelog(logfile,myname,"inital sleep "pollsleep - (ssm % pollsleep)" seconds.")

		exit_code = system("sleep "pollsleep - (ssm % pollsleep)" && exit 27") # initial sleep
	}

	if(exit_code != 0)
	{
		arr_idx = 0

		for (i = 0; i < maxData; i++)
			arr_speed[i] = 0.00

		do # main plugin infinite loop
		{
			mb_cmd | getline mb_wspeed # run os cmd to get raw data from mb
			close(mb_cmd)
			
			#insert value in array
			#printf("wspeed0 %1.00f\n", mb_wspeed * 1.00)
			arr_speed[arr_idx] = mb_wspeed
			++arr_idx
			if (arr_idx == maxData)
				arr_idx = 0
			
			wind_awg = calcawg(arr_speed, maxData)
			
			printf("wind0 0 %1.0f %1.0f\n", (mb_wspeed * 10), (wind_awg * 10)) #value should be scaled  * 10
			system("") # flush all i/o buffers
			ssm = strftime("%S",systime()) + (strftime("%M",systime()) * 60) + (strftime("%H",systime()) * 3600) # seconds since midnight
			exit_code = system("sleep "pollsleep - (ssm % pollsleep)" && exit 27") # polling sleep

		} while(exit_code != 0)
	}
}