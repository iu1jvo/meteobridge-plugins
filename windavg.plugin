#!/usr/bin/awk -f
#
#--------------------------------------------------------------------------------------------------------------------
#	windavg.plugin		Meteobridge plugin weatherstation to calculate wind average if not provided by meteo station
#
#  Copyright 2022 by IU1JVO [Giuliano Favro] (iu1jvo@gmail.com)
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#	Meteobridge user-defined plugin weatherstation to calculate Wind average from
#	prinary wind speed sensor.
#
#	Written 05-Jan-2021 by IU1JVO (Giuliano Favro) Ver 1.0 (iu1jvo@gmail.com)
# 		special thanks to TrimbleSoftware (https://github.com/TrimbleSoftware/mbwbpi)
#
# awk lang reference:
#		http://www.math.utah.edu/docs/info/gawk_toc.html
#
# Version history
#	1.0	-	Compute Only Wind Average
#	1.1	-	Wind speed Average improvemnt: Speed is computed only on valid data, to cancel the initialization time at script start (10 minutes)
#	2.0 -	Add at wind speed average: Wind Gust on 10 minutes, Average of wind direction.
#

# function definitions

# write timestampped message to logfile ala mb style
function writelog(path, name, message)
{
	system("echo '"name" ("strftime("%d.%m.%Y %T",systime())"): "message"' >> "path" 2>/dev/null")
}

# compute Wind Averages
function calcawg(speeds, degs, dataNum)
{
	#average of direction in D_out[0]
    PI = atan2(0,-1)
    x=0.0; y=0.0
	p = 0
	for (i = 0; i < dataNum; i++) {
		p = degs[i] * PI / 180.0
		x += sin(p)
		y += cos(p)
	}
    p = atan2(x,y) * 180.0 / PI	
    if (p<0) p += 360
	D_out[0] = p


	#gust in D_out[0], average of speeds in D_out[1]
	tSpeed = 0.00
	gust = 0.00
	for (i = 0; i < dataNum; i++) {
		if (speeds[i] > gust) {
			gust = speeds[i]
		}
		
		tSpeed = tSpeed + speeds[i]
	}
	D_out[1] = gust
	D_out[2] = (tSpeed / dataNum)
	
	return sprintf("%f\t%f\t%f", D_out[0], D_out[1], D_out[2])
}



# main program
BEGIN {

	myname = "windawg"
	ver = "2.0"      # version
	maxData = 120    # Maximum Number of Data Sample
	wind_awg = 0.0   # Wind average
	numValidData = 0 #
	exit_code = -1   # Exit Code
	pollsleep = 5    # Seconds of sleep between samples

	# the os command used to retreive wind speed from Primary Station
	mb_cmd = "wget -q -O - 'http://localhost/public/template.cgi?template=[wind0wind-act]%09[wind0dir-act]&contenttype=text/plain;charset=iso-8859-1'" #retun '0.0 0.0' (wind dir)
	logfile = "/tmp/log/meteobridge.log"
	writetolog = 1

	if(writetolog)
	{
		writelog(logfile,myname,"(windavg) Wind Average plugin weather station (version "ver") started.")
		writelog(logfile,myname,"polling interval "pollsleep" seconds.")
		writelog(logfile,myname,"mb logger command line: '"mb_cmd"'")
	}

	ssm = strftime("%S",systime()) + (strftime("%M",systime()) * 60) + (strftime("%H",systime()) * 3600) # seconds since midnight
	if(pollsleep - ((ssm % pollsleep) > 0))
	{
		if(writetolog)
			writelog(logfile,myname,"inital sleep "pollsleep - (ssm % pollsleep)" seconds.")

		exit_code = system("sleep "pollsleep - (ssm % pollsleep)" && exit 27") # initial sleep
	}

	if(exit_code != 0)
	{
		arr_idx = 0

		# init the data array
		for (i = 0; i < maxData; i++) {
			arr_speed[i] = 0.00
			arr_deg[i] = 0
		}
			
		numValidData = 0;	

		do # main plugin infinite loop
		{
			mb_cmd | getline mb_vars # run os cmd to get raw data from mb
			close(mb_cmd)
		
			#insert sample in the data array
			split(mb_vars,arrVar,"\t")
			arr_speed[arr_idx] = arrVar[1]
			arr_deg[arr_idx] = arrVar[2]

			++arr_idx
			
			#Icrement the number of valid data
			if (numValidData < maxData) {
				++numValidData
			}
			
			# data array is a circular buffer
			if (arr_idx >= maxData)
				arr_idx = 0

			
			#compute average
			cData_s = calcawg(arr_speed, arr_deg, numValidData)
			
			split(cData_s,cData,"\t")
		
			#print the string in the format needed to be accepted by meteobridge: ' wind0 (direction) (gust) (avg speed)' all value are integer. Degree for direction, m/s*10 for speeds.
			printf("wind0 %1.0f %1.0f %1.0f\n", (cData[1] * 1.0), (cData[2] * 10.0), (cData[3] * 10.0)) #value of speed should be scaled  * 10
			
			system("") # flush all i/o buffers
			ssm = strftime("%S",systime()) + (strftime("%M",systime()) * 60) + (strftime("%H",systime()) * 3600) # seconds since midnight
			exit_code = system("sleep "pollsleep - (ssm % pollsleep)" && exit 27") # polling sleep

		} while(exit_code != 0)
	}
}
